<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  <title>RetroToons TV</title>
  <style>
    * {
      box-sizing: border-box;
    }

    html, body {
      margin: 0;
      padding: 0;
      width: 100vw;
      height: 100vh;
      font-family: 'Arial', sans-serif;
      background: linear-gradient(160deg, #f9d423 0%, #ff4e50 100%);
      color: #fff;
      display: flex;
      overflow: hidden;
    }

    #uiWrapper {
      display: flex;
      width: 100%;
      height: 100%;
    }

    .sidebar {
      width: 22vw;
      background-color: #6a1b9a;
      padding: 2vh 1vw;
      display: flex;
      flex-direction: column;
      gap: 2vh;
      overflow-y: auto;
    }

    .channel {
      background: rgba(255, 255, 255, 0.15);
      padding: 1.5vh 1vw;
      border-radius: 1vh;
      cursor: pointer;
      font-size: 2.2vh;
      border: 2px solid transparent;
      transition: background 0.3s, border-color 0.3s;
    }

    .channel:focus {
      outline: none;
      border-color: #ffa500;
      background: rgba(255, 255, 255, 0.3);
    }

    .channel.selected {
      border-color: #fff;
      background: rgba(255, 255, 255, 0.25);
    }

    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding: 3vh 2vw;
    }

    h1 {
      font-size: 5vh;
      margin-bottom: 3vh;
      text-transform: uppercase;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
    }

    video {
      width: 100%;
      max-height: 75vh;
      border: 4px solid white;
      border-radius: 2vh;
      box-shadow: 0 0 55px rgba(0, 0, 0, 0.6);
    }

    video:focus {
      outline: none;
      border-color: #ffa500;
      box-shadow: 0 0 65px rgba(255, 255, 255, 0.8);
    }

    /* Pantalla completa: ocultar UI y controles */
    .fullscreen-ui-hidden .sidebar,
    .fullscreen-ui-hidden .main-content h1 {
      display: none;
    }

    .fullscreen-ui-hidden video::-webkit-media-controls {
      display: none !important;
    }

    .fullscreen-ui-hidden video {
      border: none;
      box-shadow: none;
      border-radius: 0;
    }

    /* Intro */
    #intro {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: linear-gradient(to bottom, #f9d423, #ff4e50);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    #intro h1 {
      font-size: 6vh;
      animation: zoomIn 2s ease-out;
      text-shadow: 2px 2px 6px rgba(0,0,0,0.5);
    }

    @keyframes zoomIn {
      0% {
        transform: scale(0.2);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }
  </style>
</head>
<body>
  <!-- Intro animada -->
  <div id="intro">
    <h1>RetroToons TV</h1>
  </div>

  <!-- Contenedor para controlar el modo fullscreen -->
  <div id="uiWrapper">
    <!-- Sidebar de canales -->
    <div class="sidebar" id="channelList">
      <div class="channel selected" tabindex="0" data-url="https://live20.bozztv.com/akamaissh101/ssh101/retrotoons/chunks.m3u8">RetroToons Op</div>
      <div class="channel" tabindex="0" data-url="https://live20.bozztv.com/giatv/giatv-Retrotoonstv/Retrotoonstv/playlist.m3u8">RetroToons Op2</div>
      
      
    </div>

    <!-- Reproductor -->
    <div class="main-content">
      <h1>RetroToons TV</h1>
      <video id="tvPlayer" controls autoplay playsinline tabindex="0">
        <source src="https://live20.bozztv.com/akamaissh101/ssh101/retrotoons/chunks.m3u8" type="application/x-mpegURL">
        Tu navegador no soporta video.
      </video>
    </div>
  </div>

  <script>
    let channels;
    const player = document.getElementById('tvPlayer');
    const uiWrapper = document.getElementById('uiWrapper');

    function changeChannel(element) {
      const url = element.getAttribute('data-url');
      player.src = url;
      player.play();

      document.querySelectorAll('.channel').forEach(btn => {
        btn.classList.remove('selected');
      });
      element.classList.add('selected');
    }

    document.addEventListener('keydown', (e) => {
      if (!channels) return;
      const active = document.activeElement;
      const index = channels.indexOf(active);
      const isVideo = active.tagName === 'VIDEO';

      switch (e.key) {
        case 'ArrowDown':
          if (isVideo) {
            channels[0].focus();
          } else if (index < channels.length - 1) {
            channels[index + 1].focus();
          }
          break;

        case 'ArrowUp':
          if (!isVideo && index > 0) {
            channels[index - 1].focus();
          } else if (index === 0) {
            player.focus();
          }
          break;

        case 'Enter':
          if (active.classList.contains('channel')) {
            changeChannel(active);
          } else if (isVideo) {
            // Ir a pantalla completa al presionar OK sobre video
            if (!document.fullscreenElement) {
              player.requestFullscreen();
            } else {
              document.exitFullscreen();
            }
          }
          break;

        case 'Backspace':
        case 'Escape':
          if (document.fullscreenElement) {
            document.exitFullscreen();
            e.preventDefault();
          }
          break;
      }
    });

    // Cambia clases al entrar/salir de fullscreen
    document.addEventListener('fullscreenchange', () => {
      if (document.fullscreenElement) {
        uiWrapper.classList.add('fullscreen-ui-hidden');
        player.removeAttribute('controls'); // Ocultar controles
      } else {
        uiWrapper.classList.remove('fullscreen-ui-hidden');
        player.setAttribute('controls', ''); // Restaurar controles
      }
    });

    window.addEventListener('load', () => {
      // AnimaciÃ³n de entrada
      setTimeout(() => {
        const intro = document.getElementById('intro');
        intro.style.transition = 'opacity 1s ease-out';
        intro.style.opacity = '0';
        setTimeout(() => intro.remove(), 1000);
      }, 3000);

      channels = Array.from(document.querySelectorAll('.channel'));

      // Enfocar canal inicial
      setTimeout(() => {
        const selected = document.querySelector('.channel.selected');
        if (selected) selected.focus();
      }, 3100);
    });
  </script>
</body>
</html>
